---
title: "Detailed Targeting"
description-meta: "How do political parties chase your vote, what do they want to keep hidden, and how much money do they spend on it? In the lead-up to the elections, we monitor political microtargeting."
format:
  html:
    page-layout: full
---


```{r setup, include=FALSE}
# here::i_am("wtm_gb.Rproj")

## Global options
knitr::opts_chunk$set(
  cache = F,
  echo = F,
  warning = F,
  message = F,
  cache.lazy = FALSE
)



# pacman::p_load(tidyverse, highcharter)
library(tidyverse)
library(highcharter)
library(gt)

pacman::p_load(knitr, tidyverse, rmarkdown, openxlsx, sf, shiny, rvest)


source(here::here("utils.R"))
source(here::here("party_utils.R"))
```



::: {.panel-tabset}

## Top Targeted Audiences

The chart below displays the most utilized targeting criteria by political parties on Meta, based on the amounts spent. 



::: {.panel-tabset}



```{r}

byparty30 <- election_dat30 %>%
    mutate(total_spend_formatted = ifelse(total_spend_formatted == 100, 1, total_spend_formatted)) %>%
  distinct(internal_id, party, .keep_all = T) %>%
  group_by(party) %>%
  summarize(total_spenderino = sum(total_spend_formatted)) %>%
  ungroup() %>%
  select(party, total_spenderino)

byparty7 <- election_dat7 %>%
    mutate(total_spend_formatted = ifelse(total_spend_formatted == 100, 1, total_spend_formatted)) %>%
  distinct(internal_id, party, .keep_all = T) %>%
  group_by(party) %>%
  summarize(total_spenderino = sum(total_spend_formatted)) %>%
  ungroup() %>%
  select(party, total_spenderino)

interest_targeting30 <-  election_dat30 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(type == "detailed") %>%
    # mutate(total_spend = readr::parse_number(total_spend_formatted)) %>%
    mutate(total_spend = ifelse(total_spend == 100, 1, total_spend)) %>%
    mutate(total_spend = total_spend * total_spend_pct) %>%
    # filter(main_currency == the_currency)   %>%
    # left_join(page_names %>% select(internal_id = page_id, page_name) %>% distinct(internal_id, .keep_all =T)) %>%
    # left_join(us_advertisers %>% rename(internal_id = page_id)) %>%
    # drop_na(left_vs_right) %>%
    mutate(value = paste0(detailed_type,": ", value)) %>%
    group_by(party, value, is_exclusion, detailed_type) %>%
    summarise(total_spend = sum(total_spend)) %>%
    ungroup() %>%
    arrange(desc(total_spend))

# election_dat30 %>%
#     filter(!is_exclusion) %>%
#     group_by(party)
#     ggplot(aes())

contested_dat30 <- interest_targeting30 %>%
  filter(!is_exclusion) %>%
  # filter(total_spend >= 40000) %>%
  filter(total_spend >= 1) %>%
  # add_count(value) %>%
  # filter(n >= 5) %>%
  left_join(byparty30) %>%
  group_by(party) %>%
  # mutate(total_spenderino = sum(total_spend)) %>%
  mutate(perc = total_spend/total_spenderino) %>%
  mutate(value = str_remove_all(value, "INTERESTS: |DEMOGRAPHICS: |BEHAVIORS: ")) #%>%
  # mutate(value = str_replace_all(value, " \\s*\\([^\\)]+\\)", ""))



interest_targeting7 <-  election_dat7 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(type == "detailed") %>%
    # mutate(total_spend = readr::parse_number(total_spend_formatted)) %>%
    mutate(total_spend = ifelse(total_spend == 50, 50, total_spend)) %>%
    mutate(total_spend = total_spend * total_spend_pct) %>%
    # filter(main_currency == the_currency)   %>%
    # left_join(page_names %>% select(internal_id = page_id, page_name) %>% distinct(internal_id, .keep_all =T)) %>%
    # left_join(us_advertisers %>% rename(internal_id = page_id)) %>%
    # drop_na(left_vs_right) %>%
    mutate(value = paste0(detailed_type,": ", value)) %>%
    group_by(party, value, is_exclusion, detailed_type) %>%
    summarise(total_spend = sum(total_spend)) %>%
    ungroup() %>%
    arrange(desc(total_spend))

# election_dat30 %>%
#     filter(!is_exclusion) %>%
#     group_by(party)
#     ggplot(aes())

contested_dat7 <- interest_targeting7 %>%
  filter(!is_exclusion) %>%
  # filter(total_spend >= 40000) %>%
  filter(total_spend >= 1) %>%
  # add_count(value) %>%
  left_join(byparty7) %>%
  group_by(party) %>%
  # mutate(total_spenderino = sum(total_spend)) %>%
  mutate(perc = total_spend/total_spenderino) %>%
  mutate(value = str_remove_all(value, "INTERESTS: |DEMOGRAPHICS: |BEHAVIORS: ")) #%>%
  # mutate(value = str_replace_all(value, " \\s*\\([^\\)]+\\)", ""))

```





### `r last30days_string`




```{r, fig.width=16, fig.height=12, dpi=300}

generate_plots <- function(data, exclusion = F) {

  if(exclusion){
    wooord <- "on ads excluding"
    wooord2 <- "excluding"
  } else {
    wooord <- "on ads including"
    wooord2 <- "targeting"
  }

  gg <- data %>%
    group_by(party) %>%
    arrange(desc(perc)) %>%
    distinct(value, .keep_all = T) %>%
    slice(1:10)

  plots <- gg %>%
    mutate(spend_perlab = scales::comma(round(total_spend))) %>%
    mutate(perc = perc * 100) %>%
    split(.$party) %>%
    map(~ {
      the_color <- color_dat$colors[color_dat$party == .x$party[1]]
      hchart(.x,
             type = "bar",
             hcaes(x = value, y = perc),
             color = the_color) %>%
        hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
        hc_yAxis(
          title = list(text = paste0("% party budget spent on ", wooord2, " audience")),
          max = max(data$perc*100)#,
          # min = 0
        ) %>%
        hc_xAxis(title = "", labels = list(style = list(fontSize = "10px"))) %>%
        hc_add_theme(hc_theme_google()) %>%
        highcharter::hc_tooltip(
          pointFormat = paste0(
            "<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ",
            currency_symbol,
            "{point.spend_perlab} ", wooord, " this audience."
          ),
          headerFormat = ""
        ) %>%
        hc_title(
          text = unique(.x$party),
          align = "left",
          style = list(fontWeight = "bold")
        ) %>%
        hc_size(height = 300) %>%
        hc_exporting(enabled = TRUE)
    })

  return(plots)

  # columns <- ggplot2::ggarrange(plots[[1]], plots[[2]], ncol = 2)
  # highcharter::hchart(columns, spacing = list(right = 100))
}


```



```{r echo=FALSE, results='asis'}

# Generate plots
plots <- generate_plots(contested_dat30)

if(length(plots)!=0){

  # Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))



}  else {
  shiny::HTML("No data (yet).")
}



```


### `r last7days_string`



```{r echo=FALSE, results='asis'}

# Generate plots
plots <- generate_plots(contested_dat7)

if(length(plots)!=0){

  # Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))



}  else {
  shiny::HTML("No data (yet).")
}


```

:::

<br>

## Top Excluded Audiences


Among the detailed options offered by Meta, the chart below shows the most excluded target audiences per party. The ranking is based on the amounts spent. 

::: {.panel-tabset}



```{r}

interest_excluding30 <-  election_dat30 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(type == "detailed") %>%
    # mutate(total_spend = readr::parse_number(total_spend_formatted)) %>%
    mutate(total_spend = ifelse(total_spend == 50, 50, total_spend)) %>%
    mutate(total_spend = total_spend * total_spend_pct) %>%
    # filter(main_currency == the_currency)   %>%
    # left_join(page_names %>% select(internal_id = page_id, page_name) %>% distinct(internal_id, .keep_all =T)) %>%
    # left_join(us_advertisers %>% rename(internal_id = page_id)) %>%
    # drop_na(left_vs_right) %>%
    mutate(value = paste0(detailed_type,": ", value)) %>%
    group_by(party, value, is_exclusion, detailed_type) %>%
    summarise(total_spend = sum(total_spend)) %>%
    ungroup() %>%
    arrange(desc(total_spend))

# election_dat30 %>%
#     filter(!is_exclusion) %>%
#     group_by(party)
#     ggplot(aes())

excluded_dat30 <- interest_excluding30 %>%
  filter(is_exclusion) %>%
  # filter(total_spend >= 40000) %>%
  filter(total_spend >= 1) %>%
  # add_count(value) %>%
  # filter(n >= 5) %>%
  left_join(byparty30) %>%
  group_by(party) %>%
  # mutate(total_spenderino = sum(total_spend)) %>%
  mutate(perc = total_spend/total_spenderino) %>%
  mutate(value = str_remove_all(value, "INTERESTS: |DEMOGRAPHICS: |BEHAVIORS: ")) %>%
  filter(perc >= 0.005)
  # mutate(value = str_replace_all(value, " \\s*\\([^\\)]+\\)", ""))



interest_excluding7 <-  election_dat7 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(type == "detailed") %>%
    # mutate(total_spend = readr::parse_number(total_spend_formatted)) %>%
    mutate(total_spend = ifelse(total_spend == 100, 1, total_spend)) %>%
    mutate(total_spend = total_spend * total_spend_pct) %>%
    # filter(main_currency == the_currency)   %>%
    # left_join(page_names %>% select(internal_id = page_id, page_name) %>% distinct(internal_id, .keep_all =T)) %>%
    # left_join(us_advertisers %>% rename(internal_id = page_id)) %>%
    # drop_na(left_vs_right) %>%
    mutate(value = paste0(detailed_type,": ", value)) %>%
    group_by(party, value, is_exclusion, detailed_type) %>%
    summarise(total_spend = sum(total_spend)) %>%
    ungroup() %>%
    arrange(desc(total_spend))

# election_dat30 %>%
#     filter(!is_exclusion) %>%
#     group_by(party)
#     ggplot(aes())

excluded_dat7 <- interest_excluding7 %>%
  filter(is_exclusion) %>%
  # filter(total_spend >= 40000) %>%
  filter(total_spend >= 1) %>%
  # add_count(value) %>%
  left_join(byparty7) %>%
  group_by(party) %>%
  # mutate(total_spenderino = sum(total_spend)) %>%
  mutate(perc = total_spend/total_spenderino) %>%
  mutate(value = str_remove_all(value, "INTERESTS: |DEMOGRAPHICS: |BEHAVIORS: ")) %>%
  filter(perc >= 0.005)#%>%
  # mutate(value = str_replace_all(value, " \\s*\\([^\\)]+\\)", ""))

```


### `r last30days_string`


```{r echo=FALSE, results='asis'}

# Generate plots
plots <- generate_plots(excluded_dat30, exclusion = T)

if(length(plots)!=0){

  # Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))



}  else {
  shiny::HTML("No data (yet).")
}

```



### `r last7days_string`


```{r echo=FALSE, results='asis'}

# Generate plots
plots <- generate_plots(excluded_dat7, exclusion = T)

if(length(plots)!=0){

  # Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))



}  else {
  shiny::HTML("No data (yet).")
}



```

:::

<br>

## Top Contested Audiences

The charts below show the target audiences where most competition takes place. For example, the groups in which all parties invest large amounts to reach voters with the same interests.

::: {.panel-tabset}


```{r, fig.width  = 13, fig.height=15}


get_contested_graph <- function(ppp, minamount = 1000, n_parties = 3) {

    # ppp <- election_dat30
interest_targeting <-  ppp %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(type == "detailed") %>%
    # mutate(total_spend = readr::parse_number(total_spend_formatted)) %>%
    mutate(total_spend = ifelse(total_spend == 100, 1, total_spend)) %>%
    mutate(total_spend = total_spend * total_spend_pct) %>%
    # filter(main_currency == the_currency)   %>%
    # left_join(page_names %>% select(internal_id = page_id, page_name) %>% distinct(internal_id, .keep_all =T)) %>%
    # left_join(us_advertisers %>% rename(internal_id = page_id)) %>%
    # drop_na(left_vs_right) %>%
    mutate(value = paste0(detailed_type,": ", value)) %>%
    group_by(party, value, is_exclusion, detailed_type) %>%
  # mutate(value = str_replace_all(value, " \\s*\\([^\\)]+\\)", "")) %>%
    summarise(total_spend = sum(total_spend)) %>%
    ungroup() %>%
    arrange(desc(total_spend))

contested_dat <<- interest_targeting %>%
  filter(!is_exclusion) %>%
  # filter(total_spend >= 40000) %>%
  filter(total_spend >= minamount) %>%
  add_count(value) %>%
  filter(n >= n_parties) %>%
    # distinct(party, value) %>%
  group_by(value) %>%
  mutate(total_spenderino = sum(total_spend)) %>%
  mutate(perc = total_spend/total_spenderino) %>%
  # mutate(value = str_remove_all(value, "INTERESTS: |DEMOGRAPHICS: |BEHAVIORS: "))  %>%
  ungroup()

justkeeptop20 <- contested_dat %>%
  arrange(desc(total_spenderino)) %>%
  distinct(value, total_spenderino) %>%
  slice(1:20)

contested_dat <- contested_dat %>%
  filter(value %in% justkeeptop20$value)


  the_order <- contested_dat %>%
    filter(party == most_left_party) %>%
    arrange(desc(perc)) %>%
    pull(value) %>%
    unique() %>%
    c(setdiff(contested_dat$value, .))

  lab_dat <- contested_dat %>%
    filter(party == most_left_party) %>%
    mutate(labb = paste0(currency_symbol, scales::comma(round(total_spenderino)))) %>%
    select(party, value, labb, total_spenderino) %>%
    mutate(value = factor(value, the_order)) %>%
    arrange(value)


  annotations <- lapply(1:nrow(lab_dat), function(i) {
  list(
    point = list(x = i - 1, y = 1, xAxis = 0, yAxis = 0),
    text = paste0("Total Spend on Audience: ",  currency_symbol, scales::comma(round(lab_dat$total_spenderino[i]))),
          # align = "right",
          # verticalAlign = "middle",
          x = 10,
          y = 0,
          style = list(fontSize = "7px", fontWeight = "bold")
  )
})

  hc_dat <- contested_dat %>%
    left_join(lab_dat %>% select(-total_spenderino)) %>%    left_join(color_dat) %>%
    mutate(perc = 100*perc) %>%
    drop_na(value) %>%
    mutate(value = factor(value, the_order))  %>%
    mutate(party = fct_relevel(party, most_left_party, after = Inf))

  hc_dat %>%
    hchart(type = "bar", hcaes(x = value, y = perc, group = party, color = colors), showInLegend = TRUE  # Set colorByPoint to TRUE to match legend colors with fill colors
) %>%
    hc_plotOptions(bar = list(stacking = "normal")) %>%
    hc_xAxis(title = list(text = "Targeting criteria"), labels = list(style = list(fontSize = "10px")),
                 categories = as.list(the_order)) %>%
    hc_yAxis(title = list(text = "% of budget spent on targeting method"), labels = list(format = "{value}%"), max = 100, min = 0) %>%
            # hc_add_theme(hc_theme_google()) %>%
  highcharter::hc_tooltip(
    pointFormat = paste0("<b>{point.party}</b><br>..makes up {point.y:.1f}% of total budget spent on {point.value}. <br>..a total of ", currency_symbol, "{point.total_spend:.0f} on this audience.<br><br>Total Expenditure on audience is ", currency_symbol, "{point.total_spenderino:.0f}."),
    headerFormat = ""
  ) %>%
    hc_legend(enabled = TRUE, verticalAlign = "bottom", layout = "horizontal") %>%
    hc_credits(
      enabled = TRUE,
      text = "Source: Meta Ad Library and data compiled by Who Targets Me. Data Viz: Fabio Votta (@favstats)."
    )    %>%
  # hc_annotations(list(labels = annotations)) %>%
    hc_colors(hc_dat %>% distinct(party, .keep_all = T) %>%  filter(party %in% contested_dat$party) %>%  arrange(party) %>% pull(colors)) #%>%
    # hc_exporting(
    #   enabled = TRUE
    # )
}


      # hc_yAxis(title = list(text = "% party budget spent on targeting method"), max = 100, min = 0) %>%

# election_dat30 %>%
#   # count(detailed_type)
# filter(detailed_type == "DEMOGRAPHICS") %>%
#   count(value, sort = T)
#
# contested_dat %>%
#   # count(detailed_type)
# filter(value == "DEMOGRAPHICS: Parents")



```


### `r last30days_string`

```{r}
# debugonce(get_contested_graph)
thegraph30 <- get_contested_graph(election_dat30, minamount = 100)

if(length(thegraph30$x$hc_opts$series)!=0){
  thegraph30
} else {
  shiny::HTML("No data (yet).")
}
```


### `r last7days_string`

```{r}

thegraph7 <- get_contested_graph(election_dat7, minamount = 100)


if(length(thegraph7$x$hc_opts$series)!=0){
  thegraph7
} else {
  shiny::HTML("No data (yet).")
}

```

:::

:::